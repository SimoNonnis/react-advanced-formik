// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test <Banner /> component UI should render Banner correctly with message and type of sysem prop 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.div
    type="system"
>
    <Styled(Attention)
        height={15}
        width={15}
    />
    <Caption
        spacing="none"
    >
        Test Message
    </Caption>
</styled.div>,
  "nodes": Array [
    <styled.div
      type="system"
>
      <Styled(Attention)
            height={15}
            width={15}
      />
      <Caption
            spacing="none"
      >
            Test Message
      </Caption>
</styled.div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <Banner
        clearAllBanners={[Function]}
        message="Test Message"
        type="system"
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Banner {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "clearAllBanners": [Function],
          "message": "Test Message",
          "type": "system",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.div
          type="system"
>
          <Styled(Attention)
                    height={15}
                    width={15}
          />
          <Caption
                    spacing="none"
          >
                    Test Message
          </Caption>
</styled.div>,
        "_debugID": 6,
        "_renderedOutput": <styled.div
          type="system"
>
          <Styled(Attention)
                    height={15}
                    width={15}
          />
          <Caption
                    spacing="none"
          >
                    Test Message
          </Caption>
</styled.div>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Banner
    clearAllBanners={[Function]}
    message="Test Message"
    type="system"
/>,
}
`;

exports[`Test <Banner /> component UI should render Banner correctly with message and type of user prop 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.div
    type="user"
>
    <Styled(Attention)
        height={15}
        width={15}
    />
    <Caption
        spacing="none"
    >
        Test Message
    </Caption>
</styled.div>,
  "nodes": Array [
    <styled.div
      type="user"
>
      <Styled(Attention)
            height={15}
            width={15}
      />
      <Caption
            spacing="none"
      >
            Test Message
      </Caption>
</styled.div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <Banner
        clearAllBanners={[Function]}
        message="Test Message"
        type="user"
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Banner {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "clearAllBanners": [Function],
          "message": "Test Message",
          "type": "user",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.div
          type="user"
>
          <Styled(Attention)
                    height={15}
                    width={15}
          />
          <Caption
                    spacing="none"
          >
                    Test Message
          </Caption>
</styled.div>,
        "_debugID": 4,
        "_renderedOutput": <styled.div
          type="user"
>
          <Styled(Attention)
                    height={15}
                    width={15}
          />
          <Caption
                    spacing="none"
          >
                    Test Message
          </Caption>
</styled.div>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Banner
    clearAllBanners={[Function]}
    message="Test Message"
    type="user"
/>,
}
`;

exports[`Test <Banner /> component UI should render Banner correctly with required props 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": null,
  "nodes": Array [
    null,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <Banner
        clearAllBanners={[Function]}
        message={null}
        type={null}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Banner {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "clearAllBanners": [Function],
          "message": null,
          "type": null,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": null,
        "_debugID": 2,
        "_renderedOutput": null,
      },
      "_renderedNodeType": 2,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Banner
    clearAllBanners={[Function]}
    message={null}
    type={null}
/>,
}
`;
